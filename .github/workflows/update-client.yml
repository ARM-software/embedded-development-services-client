name: Update Client

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_call:

jobs:
  get-all-service-definition:
    name: Get all-service definition
    runs-on: ubuntu-latest
    steps:
    - name: Checkout API-Uniform-Contract repo
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GIT_SECRET }}
        repository: Arm-Debug/API-Uniform-Contract
        path: API-Uniform-Contract
        ref: production
    - uses: actions/upload-artifact@master
      with:
        name: all-service-flat
        path: API-Uniform-Contract/all/1/

  update-client:
    name: Update client
    runs-on: ubuntu-latest
    needs: get-all-service-definition
    steps:
    - uses: actions/checkout@v3
    - name: Download all-service-flat artefact
      uses: actions/download-artifact@master
      with:
        name: all-service-flat
        path: all-service-definition
    - name: Download openapi-generator
      run: |
        mkdir -p /usr/local/bin/
        curl  https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > /usr/local/bin/openapi-generator
        chmod u+x /usr/local/bin/openapi-generator
    - name: Generate client
      run: |
        ls all-service-definition
        chmod +x ./scripts/generate-client.sh
        ./scripts/generate-client.sh -i all-service-definition/all-def-flat.yaml -o client -d
        cd client
        go mod tidy
    - name: Copy extensions to client
      run: |
        if [ -d ./extensions/ ]; then
          cp -r extensions/. client/
          cd client
          go mod tidy
        else
          echo "Directory 'extensions' does not exist. Skipping..."
        fi

    - name: Fix **os.File bug
      # FIXME remove when https://github.com/OpenAPITools/openapi-generator/issues/12810 is fixed
      run: |
        sed -i -e 's/**os.File/*os.File/g' ./client/api_build_jobs.go
    - name: Update Go
      run: |
        chmod +x ./scripts/update_go.sh
        ./scripts/update_go.sh
    - uses: actions/upload-artifact@master
      with:
        name: client-updates
        path: |
          client
          README.md

  commit-changes:
    name: Commit changes
    runs-on: ubuntu-latest
    needs: update-client
    steps:
    - uses: actions/checkout@v3
    - name: Download updated client artefacts
      uses: actions/download-artifact@master
      with:
        name: client-updates
        path: .
    - name: Check for client changes
      run: |
        SERVER_UPDATE="$(if [[ $(git status client/* --porcelain | grep -v go.mod  | grep -v go.sum) ]] ; then echo 'âœ¨ New server autogenerated files' ; fi)"
        GO_UPDATE="$(if [[ $(git diff README.md | grep -E 'go-v1\.[[:digit:]]{2}') ]] || [[ $(git diff client/go.mod | grep -E 'go 1\.[[:digit:]]{2}') ]] ; then echo 'ðŸ‘· Golang version updates' ; fi)"
        if [[ $SERVER_UPDATE ]] ; then echo "SERVER_UPDATE=$SERVER_UPDATE" >> $GITHUB_ENV ; fi
        if [[ $GO_UPDATE ]] ; then echo "GO_UPDATE=$GO_UPDATE" >> $GITHUB_ENV ; fi
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install continuous-delivery-scripts
      run: |
        pip install continuous-delivery-scripts
    - name: Generate News File
      run: |
        SERVER_UPDATE="${{ env.SERVER_UPDATE }}"
        GO_UPDATE="${{ env.GO_UPDATE }}"
        if [[ $SERVER_UPDATE ]] ; then cd-create-news-file --type feature "Updated client due to schema changes" ; fi
        if [[ $GO_UPDATE ]] ; then cd-create-news-file --type bugfix "Updated Golang version" ; fi
    - name: Set commit message
      run: |
        SERVER_UPDATE="${{ env.SERVER_UPDATE }}"
        GO_UPDATE="${{ env.GO_UPDATE }}"
        MESSAGE="$SERVER_UPDATE$(if [[ $SERVER_UPDATE ]] && [[ $GO_UPDATE ]]; then echo ' + ' ; fi)$GO_UPDATE  [ci skip]"
        echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
    - name: Commit changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: ":sparkles: Automatic changes -> ${{ env.MESSAGE }}"
        file_pattern: client/* README.md changes/*
        commit_user_name: monty-bot
        commit_user_email: monty-bot@arm.com

  release:
    name: Release if necessary
    runs-on: ubuntu-latest
    needs: commit-changes
    steps:
    - run: gh workflow run release.yml -f release_type=release
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
