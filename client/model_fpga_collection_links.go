/*
 * Copyright (C) 2020-2025 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
Solar API

This API provides a RESTful interface to all the Solar services e.g. looking for boards, building projects, etc. - This API uses Hypermedia as the Engine of Application State (HATEOAS) to drive the discovery and provide   affordances. - Discovery is possible by following links from the well known root resource. While this specification lists   all supported endpoints, it is only recommended that these are hard coded into a client if code generation is   being used. Otherwise, it is recommended that the discovery mechanisms present in the resources (affordances)   are used exclusively. - Affordances are links which indicate whether an action is currently possible, this is significantly different from   whether the service supports an action in general. This specification defines what actions could be possible,   but only by checking the affordances returned by the API in the returned resources, can a client determine whether   this action is currently possible or available for the current user. For example:   - An operation to modify a resource could be defined in this specification, but the user may lack the appropriate     privileges. In that situation, the affordance link would not be present in the resource when read. Therefore,     the client can infer that it is not possible to edit this resource and present appropriate information to the     user.   - An operation to delete a resource could be defined and be possible in some circumstances. The specification     describes that the delete is supported and how to use it, but the affordance describes whether it is currently     possible. The logic in the API may dictate that if the resource was in use (perhaps it is a running job or used     by another resource), then it will not be possible to delete that resource as it would result in a conflicted     state. - It is strongly encouraged that affordances are used by all clients, even those using code generation. This has the   ability to both improve robustness and the user experience by decoupling the client and server. For example, if for   some reason the criteria for deleting a resource changes, the logic is only implemented in the server and there is   no need to update the logic in the client as it is driven by the affordances. - The format used for the resources is the Hypertext Application Language (HAL), which includes the definition   of links and embedded resources. 

API version: 1.1.1
Contact: support@arm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FPGACollectionLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FPGACollectionLinks{}

// FPGACollectionLinks These hypermedia links inside a collection resource allow contained resources to be discovered and for large collections to be paged through. - The `item` link relation contains a list of resources contained in the collection. If there is a `next` or   `previous` link present then not all the resources in the collection are currently being shown. - The `first` link points to the first page of a feed resource, this will not be be present if the entire   resource has been returned in the current page. - The `last` link points to the last page of a feed resource, this will not be be present if the entire   resource has been returned in the current page. - The `prev` link points to the previous page in the resource, this will not be present if the current page is   the first (or only page) page. - The `next` link points to the next page in the resource, this will not be present if the current page is the   last (or only page) page. - The `simple` link relation will be present in embedded representations to retrieve a non embedded   representation of the current context. - The `alternate` link relation is a simple templated URI to allow page selection by a client. - The `embedded`  link relation is an embedded representation of the current (non-embedded context). - The `create` link provides the URI where an FPGA can be provisioned
type FPGACollectionLinks struct {
	Alternate *HalLinkData `json:"alternate,omitempty"`
	Create *HalLinkData `json:"create,omitempty"`
	Embedded *HalLinkData `json:"embedded,omitempty"`
	First *HalLinkData `json:"first,omitempty"`
	Item []HalLinkData `json:"item,omitempty"`
	Last *HalLinkData `json:"last,omitempty"`
	Next *HalLinkData `json:"next,omitempty"`
	Prev *HalLinkData `json:"prev,omitempty"`
	Self HalLinkData `json:"self"`
	Simple *HalLinkData `json:"simple,omitempty"`
}

type _FPGACollectionLinks FPGACollectionLinks

// NewFPGACollectionLinks instantiates a new FPGACollectionLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFPGACollectionLinks(self HalLinkData) *FPGACollectionLinks {
	this := FPGACollectionLinks{}
	this.Self = self
	return &this
}

// NewFPGACollectionLinksWithDefaults instantiates a new FPGACollectionLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFPGACollectionLinksWithDefaults() *FPGACollectionLinks {
	this := FPGACollectionLinks{}
	return &this
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetAlternate() HalLinkData {
	if o == nil || IsNil(o.Alternate) {
		var ret HalLinkData
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetAlternateOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Alternate) {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasAlternate() bool {
	if o != nil && !IsNil(o.Alternate) {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given HalLinkData and assigns it to the Alternate field.
func (o *FPGACollectionLinks) SetAlternate(v HalLinkData) {
	o.Alternate = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetCreate() HalLinkData {
	if o == nil || IsNil(o.Create) {
		var ret HalLinkData
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetCreateOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given HalLinkData and assigns it to the Create field.
func (o *FPGACollectionLinks) SetCreate(v HalLinkData) {
	o.Create = &v
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetEmbedded() HalLinkData {
	if o == nil || IsNil(o.Embedded) {
		var ret HalLinkData
		return ret
	}
	return *o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetEmbeddedOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Embedded) {
		return nil, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given HalLinkData and assigns it to the Embedded field.
func (o *FPGACollectionLinks) SetEmbedded(v HalLinkData) {
	o.Embedded = &v
}

// GetFirst returns the First field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetFirst() HalLinkData {
	if o == nil || IsNil(o.First) {
		var ret HalLinkData
		return ret
	}
	return *o.First
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetFirstOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.First) {
		return nil, false
	}
	return o.First, true
}

// HasFirst returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasFirst() bool {
	if o != nil && !IsNil(o.First) {
		return true
	}

	return false
}

// SetFirst gets a reference to the given HalLinkData and assigns it to the First field.
func (o *FPGACollectionLinks) SetFirst(v HalLinkData) {
	o.First = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetItem() []HalLinkData {
	if o == nil || IsNil(o.Item) {
		var ret []HalLinkData
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetItemOk() ([]HalLinkData, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given []HalLinkData and assigns it to the Item field.
func (o *FPGACollectionLinks) SetItem(v []HalLinkData) {
	o.Item = v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetLast() HalLinkData {
	if o == nil || IsNil(o.Last) {
		var ret HalLinkData
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetLastOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Last) {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasLast() bool {
	if o != nil && !IsNil(o.Last) {
		return true
	}

	return false
}

// SetLast gets a reference to the given HalLinkData and assigns it to the Last field.
func (o *FPGACollectionLinks) SetLast(v HalLinkData) {
	o.Last = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetNext() HalLinkData {
	if o == nil || IsNil(o.Next) {
		var ret HalLinkData
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetNextOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given HalLinkData and assigns it to the Next field.
func (o *FPGACollectionLinks) SetNext(v HalLinkData) {
	o.Next = &v
}

// GetPrev returns the Prev field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetPrev() HalLinkData {
	if o == nil || IsNil(o.Prev) {
		var ret HalLinkData
		return ret
	}
	return *o.Prev
}

// GetPrevOk returns a tuple with the Prev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetPrevOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Prev) {
		return nil, false
	}
	return o.Prev, true
}

// HasPrev returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasPrev() bool {
	if o != nil && !IsNil(o.Prev) {
		return true
	}

	return false
}

// SetPrev gets a reference to the given HalLinkData and assigns it to the Prev field.
func (o *FPGACollectionLinks) SetPrev(v HalLinkData) {
	o.Prev = &v
}

// GetSelf returns the Self field value
func (o *FPGACollectionLinks) GetSelf() HalLinkData {
	if o == nil {
		var ret HalLinkData
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetSelfOk() (*HalLinkData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *FPGACollectionLinks) SetSelf(v HalLinkData) {
	o.Self = v
}

// GetSimple returns the Simple field value if set, zero value otherwise.
func (o *FPGACollectionLinks) GetSimple() HalLinkData {
	if o == nil || IsNil(o.Simple) {
		var ret HalLinkData
		return ret
	}
	return *o.Simple
}

// GetSimpleOk returns a tuple with the Simple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGACollectionLinks) GetSimpleOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Simple) {
		return nil, false
	}
	return o.Simple, true
}

// HasSimple returns a boolean if a field has been set.
func (o *FPGACollectionLinks) HasSimple() bool {
	if o != nil && !IsNil(o.Simple) {
		return true
	}

	return false
}

// SetSimple gets a reference to the given HalLinkData and assigns it to the Simple field.
func (o *FPGACollectionLinks) SetSimple(v HalLinkData) {
	o.Simple = &v
}

func (o FPGACollectionLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FPGACollectionLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alternate) {
		toSerialize["alternate"] = o.Alternate
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Embedded) {
		toSerialize["embedded"] = o.Embedded
	}
	if !IsNil(o.First) {
		toSerialize["first"] = o.First
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.Last) {
		toSerialize["last"] = o.Last
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.Prev) {
		toSerialize["prev"] = o.Prev
	}
	toSerialize["self"] = o.Self
	if !IsNil(o.Simple) {
		toSerialize["simple"] = o.Simple
	}
	return toSerialize, nil
}

func (o *FPGACollectionLinks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"self",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFPGACollectionLinks := _FPGACollectionLinks{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFPGACollectionLinks)

	if err != nil {
		return err
	}

	*o = FPGACollectionLinks(varFPGACollectionLinks)

	return err
}

type NullableFPGACollectionLinks struct {
	value *FPGACollectionLinks
	isSet bool
}

func (v NullableFPGACollectionLinks) Get() *FPGACollectionLinks {
	return v.value
}

func (v *NullableFPGACollectionLinks) Set(val *FPGACollectionLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableFPGACollectionLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableFPGACollectionLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPGACollectionLinks(val *FPGACollectionLinks) *NullableFPGACollectionLinks {
	return &NullableFPGACollectionLinks{value: val, isSet: true}
}

func (v NullableFPGACollectionLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPGACollectionLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


