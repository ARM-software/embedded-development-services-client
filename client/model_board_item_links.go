/*
 * Copyright (C) 2020-2023 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
Solar API

This API provides a RESTful interface to all the Solar services e.g. looking for boards, building projects, etc. - This API uses Hypermedia as the Engine of Application State (HATEOAS) to drive the discovery and provide   affordances. - Discovery is possible by following links from the well known root resource. While this specification lists   all supported endpoints, it is only recommended that these are hard coded into a client if code generation is   being used. Otherwise, it is recommended that the discovery mechanisms present in the resources (affordances)   are used exclusively. - Affordances are links which indicate whether an action is currently possible, this is significantly different from   whether the service supports an action in general. This specification defines what actions could be possible,   but only by checking the affordances returned by the API in the returned resources, can a client determine whether   this action is currently possible or available for the current user. For example:   - An operation to modify a resource could be defined in this specification, but the user may lack the appropriate     privileges. In that situation, the affordance link would not be present in the resource when read. Therefore,     the client can infer that it is not possible to edit this resource and present appropriate information to the     user.   - An operation to delete a resource could be defined and be possible in some circumstances. The specification     describes that the delete is supported and how to use it, but the affordance describes whether it is currently     possible. The logic in the API may dictate that if the resource was in use (perhaps it is a running job or used     by another resource), then it will not be possible to delete that resource as it would result in a conflicted     state. - It is strongly encouraged that affordances are used by all clients, even those using code generation. This has the   ability to both improve robustness and the user experience by decoupling the client and server. For example, if for   some reason the criteria for deleting a resource changes, the logic is only implemented in the server and there is   no need to update the logic in the client as it is driven by the affordances. - The format used for the resources is the Hypertext Application Language (HAL), which includes the definition   of links and embedded resources. 

API version: 1.0.0
Contact: support@arm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the BoardItemLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoardItemLinks{}

// BoardItemLinks The links for a BoardItem.
type BoardItemLinks struct {
	Collection HalLinkData `json:"collection"`
	// Links to Devices mounted on the Board.
	Device []HalLinkData `json:"device,omitempty"`
	// Links to any documentation held by the Board.
	Documentation []HalLinkData `json:"documentation,omitempty"`
	Download *HalLinkData `json:"download,omitempty"`
	Guide *HalLinkData `json:"guide,omitempty"`
	Image *HalLinkData `json:"image,omitempty"`
	Self HalLinkData `json:"self"`
	Vendor HalLinkData `json:"vendor"`
}

type _BoardItemLinks BoardItemLinks

// NewBoardItemLinks instantiates a new BoardItemLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoardItemLinks(collection HalLinkData, self HalLinkData, vendor HalLinkData) *BoardItemLinks {
	this := BoardItemLinks{}
	this.Collection = collection
	this.Self = self
	this.Vendor = vendor
	return &this
}

// NewBoardItemLinksWithDefaults instantiates a new BoardItemLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoardItemLinksWithDefaults() *BoardItemLinks {
	this := BoardItemLinks{}
	return &this
}

// GetCollection returns the Collection field value
func (o *BoardItemLinks) GetCollection() HalLinkData {
	if o == nil {
		var ret HalLinkData
		return ret
	}

	return o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetCollectionOk() (*HalLinkData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Collection, true
}

// SetCollection sets field value
func (o *BoardItemLinks) SetCollection(v HalLinkData) {
	o.Collection = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *BoardItemLinks) GetDevice() []HalLinkData {
	if o == nil || IsNil(o.Device) {
		var ret []HalLinkData
		return ret
	}
	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetDeviceOk() ([]HalLinkData, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *BoardItemLinks) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given []HalLinkData and assigns it to the Device field.
func (o *BoardItemLinks) SetDevice(v []HalLinkData) {
	o.Device = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *BoardItemLinks) GetDocumentation() []HalLinkData {
	if o == nil || IsNil(o.Documentation) {
		var ret []HalLinkData
		return ret
	}
	return o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetDocumentationOk() ([]HalLinkData, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *BoardItemLinks) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given []HalLinkData and assigns it to the Documentation field.
func (o *BoardItemLinks) SetDocumentation(v []HalLinkData) {
	o.Documentation = v
}

// GetDownload returns the Download field value if set, zero value otherwise.
func (o *BoardItemLinks) GetDownload() HalLinkData {
	if o == nil || IsNil(o.Download) {
		var ret HalLinkData
		return ret
	}
	return *o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetDownloadOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Download) {
		return nil, false
	}
	return o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *BoardItemLinks) HasDownload() bool {
	if o != nil && !IsNil(o.Download) {
		return true
	}

	return false
}

// SetDownload gets a reference to the given HalLinkData and assigns it to the Download field.
func (o *BoardItemLinks) SetDownload(v HalLinkData) {
	o.Download = &v
}

// GetGuide returns the Guide field value if set, zero value otherwise.
func (o *BoardItemLinks) GetGuide() HalLinkData {
	if o == nil || IsNil(o.Guide) {
		var ret HalLinkData
		return ret
	}
	return *o.Guide
}

// GetGuideOk returns a tuple with the Guide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetGuideOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Guide) {
		return nil, false
	}
	return o.Guide, true
}

// HasGuide returns a boolean if a field has been set.
func (o *BoardItemLinks) HasGuide() bool {
	if o != nil && !IsNil(o.Guide) {
		return true
	}

	return false
}

// SetGuide gets a reference to the given HalLinkData and assigns it to the Guide field.
func (o *BoardItemLinks) SetGuide(v HalLinkData) {
	o.Guide = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *BoardItemLinks) GetImage() HalLinkData {
	if o == nil || IsNil(o.Image) {
		var ret HalLinkData
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetImageOk() (*HalLinkData, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *BoardItemLinks) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given HalLinkData and assigns it to the Image field.
func (o *BoardItemLinks) SetImage(v HalLinkData) {
	o.Image = &v
}

// GetSelf returns the Self field value
func (o *BoardItemLinks) GetSelf() HalLinkData {
	if o == nil {
		var ret HalLinkData
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetSelfOk() (*HalLinkData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *BoardItemLinks) SetSelf(v HalLinkData) {
	o.Self = v
}

// GetVendor returns the Vendor field value
func (o *BoardItemLinks) GetVendor() HalLinkData {
	if o == nil {
		var ret HalLinkData
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *BoardItemLinks) GetVendorOk() (*HalLinkData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *BoardItemLinks) SetVendor(v HalLinkData) {
	o.Vendor = v
}

func (o BoardItemLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoardItemLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collection"] = o.Collection
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.Download) {
		toSerialize["download"] = o.Download
	}
	if !IsNil(o.Guide) {
		toSerialize["guide"] = o.Guide
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	toSerialize["self"] = o.Self
	toSerialize["vendor"] = o.Vendor
	return toSerialize, nil
}

func (o *BoardItemLinks) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collection",
		"self",
		"vendor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoardItemLinks := _BoardItemLinks{}

	err = json.Unmarshal(bytes, &varBoardItemLinks)

	if err != nil {
		return err
	}

	*o = BoardItemLinks(varBoardItemLinks)

	return err
}

type NullableBoardItemLinks struct {
	value *BoardItemLinks
	isSet bool
}

func (v NullableBoardItemLinks) Get() *BoardItemLinks {
	return v.value
}

func (v *NullableBoardItemLinks) Set(val *BoardItemLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableBoardItemLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableBoardItemLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoardItemLinks(val *BoardItemLinks) *NullableBoardItemLinks {
	return &NullableBoardItemLinks{value: val, isSet: true}
}

func (v NullableBoardItemLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoardItemLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


