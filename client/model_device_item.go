/*
 * Copyright (C) 2020-2023 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
Solar API

This API provides a RESTful interface to all the Solar services e.g. looking for boards, building projects, etc. - This API uses Hypermedia as the Engine of Application State (HATEOAS) to drive the discovery and provide   affordances. - Discovery is possible by following links from the well known root resource. While this specification lists   all supported endpoints, it is only recommended that these are hard coded into a client if code generation is   being used. Otherwise, it is recommended that the discovery mechanisms present in the resources (affordances)   are used exclusively. - Affordances are links which indicate whether an action is currently possible, this is significantly different from   whether the service supports an action in general. This specification defines what actions could be possible,   but only by checking the affordances returned by the API in the returned resources, can a client determine whether   this action is currently possible or available for the current user. For example:   - An operation to modify a resource could be defined in this specification, but the user may lack the appropriate     privileges. In that situation, the affordance link would not be present in the resource when read. Therefore,     the client can infer that it is not possible to edit this resource and present appropriate information to the     user.   - An operation to delete a resource could be defined and be possible in some circumstances. The specification     describes that the delete is supported and how to use it, but the affordance describes whether it is currently     possible. The logic in the API may dictate that if the resource was in use (perhaps it is a running job or used     by another resource), then it will not be possible to delete that resource as it would result in a conflicted     state. - It is strongly encouraged that affordances are used by all clients, even those using code generation. This has the   ability to both improve robustness and the user experience by decoupling the client and server. For example, if for   some reason the criteria for deleting a resource changes, the logic is only implemented in the server and there is   no need to update the logic in the client as it is driven by the affordances. - The format used for the resources is the Hypertext Application Language (HAL), which includes the definition   of links and embedded resources. 

API version: 1.0.0
Contact: support@arm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceItem{}

// DeviceItem struct for DeviceItem
type DeviceItem struct {
	Links DeviceItemLinks `json:"_links"`
	Metadata NullableCommonMetadata `json:"_metadata"`
	// Device Family the Device belongs to.
	Family NullableString `json:"family,omitempty"`
	// Array of processors within the Device.
	Processors []ProcessorItem `json:"processors"`
	// Unique human-readable identifier for the Device
	Slug string `json:"slug"`
	SourcePackId DeviceItemSourcePackId `json:"source_pack_id"`
	// Sub-Device Family the Device belongs to.
	SubFamily NullableString `json:"sub_family,omitempty"`
	// Human-readable name of the Device.
	Title string `json:"title"`
	// Vendor of the Device.
	Vendor string `json:"vendor"`
}

type _DeviceItem DeviceItem

// NewDeviceItem instantiates a new DeviceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceItem(links DeviceItemLinks, metadata NullableCommonMetadata, processors []ProcessorItem, slug string, sourcePackId DeviceItemSourcePackId, title string, vendor string) *DeviceItem {
	this := DeviceItem{}
	this.Links = links
	this.Metadata = metadata
	this.Processors = processors
	this.Slug = slug
	this.SourcePackId = sourcePackId
	this.Title = title
	this.Vendor = vendor
	return &this
}

// NewDeviceItemWithDefaults instantiates a new DeviceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceItemWithDefaults() *DeviceItem {
	this := DeviceItem{}
	return &this
}

// GetLinks returns the Links field value
func (o *DeviceItem) GetLinks() DeviceItemLinks {
	if o == nil {
		var ret DeviceItemLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *DeviceItem) GetLinksOk() (*DeviceItemLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *DeviceItem) SetLinks(v DeviceItemLinks) {
	o.Links = v
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for CommonMetadata will be returned
func (o *DeviceItem) GetMetadata() CommonMetadata {
	if o == nil || o.Metadata.Get() == nil {
		var ret CommonMetadata
		return ret
	}

	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceItem) GetMetadataOk() (*CommonMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// SetMetadata sets field value
func (o *DeviceItem) SetMetadata(v CommonMetadata) {
	o.Metadata.Set(&v)
}

// GetFamily returns the Family field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceItem) GetFamily() string {
	if o == nil || IsNil(o.Family.Get()) {
		var ret string
		return ret
	}
	return *o.Family.Get()
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceItem) GetFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Family.Get(), o.Family.IsSet()
}

// HasFamily returns a boolean if a field has been set.
func (o *DeviceItem) HasFamily() bool {
	if o != nil && o.Family.IsSet() {
		return true
	}

	return false
}

// SetFamily gets a reference to the given NullableString and assigns it to the Family field.
func (o *DeviceItem) SetFamily(v string) {
	o.Family.Set(&v)
}
// SetFamilyNil sets the value for Family to be an explicit nil
func (o *DeviceItem) SetFamilyNil() {
	o.Family.Set(nil)
}

// UnsetFamily ensures that no value is present for Family, not even an explicit nil
func (o *DeviceItem) UnsetFamily() {
	o.Family.Unset()
}

// GetProcessors returns the Processors field value
func (o *DeviceItem) GetProcessors() []ProcessorItem {
	if o == nil {
		var ret []ProcessorItem
		return ret
	}

	return o.Processors
}

// GetProcessorsOk returns a tuple with the Processors field value
// and a boolean to check if the value has been set.
func (o *DeviceItem) GetProcessorsOk() ([]ProcessorItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Processors, true
}

// SetProcessors sets field value
func (o *DeviceItem) SetProcessors(v []ProcessorItem) {
	o.Processors = v
}

// GetSlug returns the Slug field value
func (o *DeviceItem) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *DeviceItem) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *DeviceItem) SetSlug(v string) {
	o.Slug = v
}

// GetSourcePackId returns the SourcePackId field value
func (o *DeviceItem) GetSourcePackId() DeviceItemSourcePackId {
	if o == nil {
		var ret DeviceItemSourcePackId
		return ret
	}

	return o.SourcePackId
}

// GetSourcePackIdOk returns a tuple with the SourcePackId field value
// and a boolean to check if the value has been set.
func (o *DeviceItem) GetSourcePackIdOk() (*DeviceItemSourcePackId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourcePackId, true
}

// SetSourcePackId sets field value
func (o *DeviceItem) SetSourcePackId(v DeviceItemSourcePackId) {
	o.SourcePackId = v
}

// GetSubFamily returns the SubFamily field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceItem) GetSubFamily() string {
	if o == nil || IsNil(o.SubFamily.Get()) {
		var ret string
		return ret
	}
	return *o.SubFamily.Get()
}

// GetSubFamilyOk returns a tuple with the SubFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceItem) GetSubFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubFamily.Get(), o.SubFamily.IsSet()
}

// HasSubFamily returns a boolean if a field has been set.
func (o *DeviceItem) HasSubFamily() bool {
	if o != nil && o.SubFamily.IsSet() {
		return true
	}

	return false
}

// SetSubFamily gets a reference to the given NullableString and assigns it to the SubFamily field.
func (o *DeviceItem) SetSubFamily(v string) {
	o.SubFamily.Set(&v)
}
// SetSubFamilyNil sets the value for SubFamily to be an explicit nil
func (o *DeviceItem) SetSubFamilyNil() {
	o.SubFamily.Set(nil)
}

// UnsetSubFamily ensures that no value is present for SubFamily, not even an explicit nil
func (o *DeviceItem) UnsetSubFamily() {
	o.SubFamily.Unset()
}

// GetTitle returns the Title field value
func (o *DeviceItem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DeviceItem) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DeviceItem) SetTitle(v string) {
	o.Title = v
}

// GetVendor returns the Vendor field value
func (o *DeviceItem) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *DeviceItem) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *DeviceItem) SetVendor(v string) {
	o.Vendor = v
}

func (o DeviceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links
	toSerialize["_metadata"] = o.Metadata.Get()
	if o.Family.IsSet() {
		toSerialize["family"] = o.Family.Get()
	}
	toSerialize["processors"] = o.Processors
	toSerialize["slug"] = o.Slug
	toSerialize["source_pack_id"] = o.SourcePackId
	if o.SubFamily.IsSet() {
		toSerialize["sub_family"] = o.SubFamily.Get()
	}
	toSerialize["title"] = o.Title
	toSerialize["vendor"] = o.Vendor
	return toSerialize, nil
}

func (o *DeviceItem) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"_metadata",
		"processors",
		"slug",
		"source_pack_id",
		"title",
		"vendor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceItem := _DeviceItem{}

	err = json.Unmarshal(bytes, &varDeviceItem)

	if err != nil {
		return err
	}

	*o = DeviceItem(varDeviceItem)

	return err
}

type NullableDeviceItem struct {
	value *DeviceItem
	isSet bool
}

func (v NullableDeviceItem) Get() *DeviceItem {
	return v.value
}

func (v *NullableDeviceItem) Set(val *DeviceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceItem(val *DeviceItem) *NullableDeviceItem {
	return &NullableDeviceItem{value: val, isSet: true}
}

func (v NullableDeviceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


