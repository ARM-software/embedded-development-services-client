/*
 * Copyright (C) 2020-2025 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
Solar API

This API provides a RESTful interface to all the Solar services e.g. looking for boards, building projects, etc. - This API uses Hypermedia as the Engine of Application State (HATEOAS) to drive the discovery and provide   affordances. - Discovery is possible by following links from the well known root resource. While this specification lists   all supported endpoints, it is only recommended that these are hard coded into a client if code generation is   being used. Otherwise, it is recommended that the discovery mechanisms present in the resources (affordances)   are used exclusively. - Affordances are links which indicate whether an action is currently possible, this is significantly different from   whether the service supports an action in general. This specification defines what actions could be possible,   but only by checking the affordances returned by the API in the returned resources, can a client determine whether   this action is currently possible or available for the current user. For example:   - An operation to modify a resource could be defined in this specification, but the user may lack the appropriate     privileges. In that situation, the affordance link would not be present in the resource when read. Therefore,     the client can infer that it is not possible to edit this resource and present appropriate information to the     user.   - An operation to delete a resource could be defined and be possible in some circumstances. The specification     describes that the delete is supported and how to use it, but the affordance describes whether it is currently     possible. The logic in the API may dictate that if the resource was in use (perhaps it is a running job or used     by another resource), then it will not be possible to delete that resource as it would result in a conflicted     state. - It is strongly encouraged that affordances are used by all clients, even those using code generation. This has the   ability to both improve robustness and the user experience by decoupling the client and server. For example, if for   some reason the criteria for deleting a resource changes, the logic is only implemented in the server and there is   no need to update the logic in the client as it is driven by the affordances. - The format used for the resources is the Hypertext Application Language (HAL), which includes the definition   of links and embedded resources. 

API version: 1.1.1
Contact: support@arm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PermissionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionItem{}

// PermissionItem struct for PermissionItem
type PermissionItem struct {
	// The list of allowed CRUDL operations.
	Operations []string `json:"operations"`
	// The function or service under which the permission is being evaluated.
	Origin string `json:"origin"`
	// The unique identifier of the resource instance.
	ResourceInstance string `json:"resourceInstance" validate:"regexp=[a-zA-Z0-9\\\\-\\"._~%!$&\\\\'(){}\\\\[£<>|\\\\]*+,;=:@]+"`
	// The unique identifier of the user or system entity that owns the specified resource instance.
	ResourceOwnerName string `json:"resourceOwnerName" validate:"regexp=[a-zA-Z0-9\\\\-\\"._~%!$&\\\\'(){}\\\\[£<>|\\\\]*+,;=:@]+"`
	// The type of resource for which permission is being checked. This should only refer to items and not collections.
	ResourceType string `json:"resourceType"`
	// The unique identifier of the user requesting access.
	UserName string `json:"userName" validate:"regexp=[a-zA-Z0-9\\\\-\\"._~%!$&\\\\'(){}\\\\[£<>|\\\\]*+,;=:@]+"`
	// The API token of the user requesting access. This can be a JWT or an internal access token.
	UserToken string `json:"userToken" validate:"regexp=[a-zA-Z0-9-_.]"`
}

type _PermissionItem PermissionItem

// NewPermissionItem instantiates a new PermissionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionItem(operations []string, origin string, resourceInstance string, resourceOwnerName string, resourceType string, userName string, userToken string) *PermissionItem {
	this := PermissionItem{}
	this.Operations = operations
	this.Origin = origin
	this.ResourceInstance = resourceInstance
	this.ResourceOwnerName = resourceOwnerName
	this.ResourceType = resourceType
	this.UserName = userName
	this.UserToken = userToken
	return &this
}

// NewPermissionItemWithDefaults instantiates a new PermissionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionItemWithDefaults() *PermissionItem {
	this := PermissionItem{}
	return &this
}

// GetOperations returns the Operations field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *PermissionItem) GetOperations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PermissionItem) GetOperationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// SetOperations sets field value
func (o *PermissionItem) SetOperations(v []string) {
	o.Operations = v
}

// GetOrigin returns the Origin field value
func (o *PermissionItem) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *PermissionItem) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *PermissionItem) SetOrigin(v string) {
	o.Origin = v
}

// GetResourceInstance returns the ResourceInstance field value
func (o *PermissionItem) GetResourceInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceInstance
}

// GetResourceInstanceOk returns a tuple with the ResourceInstance field value
// and a boolean to check if the value has been set.
func (o *PermissionItem) GetResourceInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceInstance, true
}

// SetResourceInstance sets field value
func (o *PermissionItem) SetResourceInstance(v string) {
	o.ResourceInstance = v
}

// GetResourceOwnerName returns the ResourceOwnerName field value
func (o *PermissionItem) GetResourceOwnerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceOwnerName
}

// GetResourceOwnerNameOk returns a tuple with the ResourceOwnerName field value
// and a boolean to check if the value has been set.
func (o *PermissionItem) GetResourceOwnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceOwnerName, true
}

// SetResourceOwnerName sets field value
func (o *PermissionItem) SetResourceOwnerName(v string) {
	o.ResourceOwnerName = v
}

// GetResourceType returns the ResourceType field value
func (o *PermissionItem) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *PermissionItem) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *PermissionItem) SetResourceType(v string) {
	o.ResourceType = v
}

// GetUserName returns the UserName field value
func (o *PermissionItem) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *PermissionItem) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *PermissionItem) SetUserName(v string) {
	o.UserName = v
}

// GetUserToken returns the UserToken field value
func (o *PermissionItem) GetUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value
// and a boolean to check if the value has been set.
func (o *PermissionItem) GetUserTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserToken, true
}

// SetUserToken sets field value
func (o *PermissionItem) SetUserToken(v string) {
	o.UserToken = v
}

func (o PermissionItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Operations != nil {
		toSerialize["operations"] = o.Operations
	}
	toSerialize["origin"] = o.Origin
	toSerialize["resourceInstance"] = o.ResourceInstance
	toSerialize["resourceOwnerName"] = o.ResourceOwnerName
	toSerialize["resourceType"] = o.ResourceType
	toSerialize["userName"] = o.UserName
	toSerialize["userToken"] = o.UserToken
	return toSerialize, nil
}

func (o *PermissionItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operations",
		"origin",
		"resourceInstance",
		"resourceOwnerName",
		"resourceType",
		"userName",
		"userToken",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPermissionItem := _PermissionItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPermissionItem)

	if err != nil {
		return err
	}

	*o = PermissionItem(varPermissionItem)

	return err
}

type NullablePermissionItem struct {
	value *PermissionItem
	isSet bool
}

func (v NullablePermissionItem) Get() *PermissionItem {
	return v.value
}

func (v *NullablePermissionItem) Set(val *PermissionItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionItem(val *PermissionItem) *NullablePermissionItem {
	return &NullablePermissionItem{value: val, isSet: true}
}

func (v NullablePermissionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


