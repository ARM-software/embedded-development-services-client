/*
 * Copyright (C) 2020-2025 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
Solar API

This API provides a RESTful interface to all the Solar services e.g. looking for boards, building projects, etc. - This API uses Hypermedia as the Engine of Application State (HATEOAS) to drive the discovery and provide   affordances. - Discovery is possible by following links from the well known root resource. While this specification lists   all supported endpoints, it is only recommended that these are hard coded into a client if code generation is   being used. Otherwise, it is recommended that the discovery mechanisms present in the resources (affordances)   are used exclusively. - Affordances are links which indicate whether an action is currently possible, this is significantly different from   whether the service supports an action in general. This specification defines what actions could be possible,   but only by checking the affordances returned by the API in the returned resources, can a client determine whether   this action is currently possible or available for the current user. For example:   - An operation to modify a resource could be defined in this specification, but the user may lack the appropriate     privileges. In that situation, the affordance link would not be present in the resource when read. Therefore,     the client can infer that it is not possible to edit this resource and present appropriate information to the     user.   - An operation to delete a resource could be defined and be possible in some circumstances. The specification     describes that the delete is supported and how to use it, but the affordance describes whether it is currently     possible. The logic in the API may dictate that if the resource was in use (perhaps it is a running job or used     by another resource), then it will not be possible to delete that resource as it would result in a conflicted     state. - It is strongly encouraged that affordances are used by all clients, even those using code generation. This has the   ability to both improve robustness and the user experience by decoupling the client and server. For example, if for   some reason the criteria for deleting a resource changes, the logic is only implemented in the server and there is   no need to update the logic in the client as it is driven by the affordances. - The format used for the resources is the Hypertext Application Language (HAL), which includes the definition   of links and embedded resources. 

API version: 1.1.1
Contact: support@arm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FPGAUARTConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FPGAUARTConnection{}

// FPGAUARTConnection The FPGA will have at least one serial UART connection for communication with the FPGA host machine
type FPGAUARTConnection struct {
	// Baud rate for the UART connection
	BaudRate int32 `json:"baudRate"`
	// TTY port for the UART connection
	TtyPort string `json:"ttyPort"`
}

type _FPGAUARTConnection FPGAUARTConnection

// NewFPGAUARTConnection instantiates a new FPGAUARTConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFPGAUARTConnection(baudRate int32, ttyPort string) *FPGAUARTConnection {
	this := FPGAUARTConnection{}
	this.BaudRate = baudRate
	this.TtyPort = ttyPort
	return &this
}

// NewFPGAUARTConnectionWithDefaults instantiates a new FPGAUARTConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFPGAUARTConnectionWithDefaults() *FPGAUARTConnection {
	this := FPGAUARTConnection{}
	var baudRate int32 = 38400
	this.BaudRate = baudRate
	return &this
}

// GetBaudRate returns the BaudRate field value
func (o *FPGAUARTConnection) GetBaudRate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BaudRate
}

// GetBaudRateOk returns a tuple with the BaudRate field value
// and a boolean to check if the value has been set.
func (o *FPGAUARTConnection) GetBaudRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaudRate, true
}

// SetBaudRate sets field value
func (o *FPGAUARTConnection) SetBaudRate(v int32) {
	o.BaudRate = v
}

// GetTtyPort returns the TtyPort field value
func (o *FPGAUARTConnection) GetTtyPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TtyPort
}

// GetTtyPortOk returns a tuple with the TtyPort field value
// and a boolean to check if the value has been set.
func (o *FPGAUARTConnection) GetTtyPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TtyPort, true
}

// SetTtyPort sets field value
func (o *FPGAUARTConnection) SetTtyPort(v string) {
	o.TtyPort = v
}

func (o FPGAUARTConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FPGAUARTConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["baudRate"] = o.BaudRate
	toSerialize["ttyPort"] = o.TtyPort
	return toSerialize, nil
}

func (o *FPGAUARTConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"baudRate",
		"ttyPort",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFPGAUARTConnection := _FPGAUARTConnection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFPGAUARTConnection)

	if err != nil {
		return err
	}

	*o = FPGAUARTConnection(varFPGAUARTConnection)

	return err
}

type NullableFPGAUARTConnection struct {
	value *FPGAUARTConnection
	isSet bool
}

func (v NullableFPGAUARTConnection) Get() *FPGAUARTConnection {
	return v.value
}

func (v *NullableFPGAUARTConnection) Set(val *FPGAUARTConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableFPGAUARTConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableFPGAUARTConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPGAUARTConnection(val *FPGAUARTConnection) *NullableFPGAUARTConnection {
	return &NullableFPGAUARTConnection{value: val, isSet: true}
}

func (v NullableFPGAUARTConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPGAUARTConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


