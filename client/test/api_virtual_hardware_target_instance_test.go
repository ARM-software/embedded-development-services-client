/*
Solar API

Testing VirtualHardwareTargetInstanceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_VirtualHardwareTargetInstanceApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test VirtualHardwareTargetInstanceApiService ClearVhtInstanceArtefact", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var artefactName string
        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.ClearVhtInstanceArtefact(context.Background(), artefactName, instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService DeleteVhtInstance", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.DeleteVhtInstance(context.Background(), instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService DownloadVhtInstanceArtefact", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var artefactName string
        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.DownloadVhtInstanceArtefact(context.Background(), artefactName, instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService GetVhtInstance", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.GetVhtInstance(context.Background(), instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService GetVhtInstanceArtefactManager", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var artefactName string
        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.GetVhtInstanceArtefactManager(context.Background(), artefactName, instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService GetVhtInstanceMessages", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.GetVhtInstanceMessages(context.Background(), instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService ListVhtInstanceArtefactManagers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.ListVhtInstanceArtefactManagers(context.Background(), instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService ListVhtInstances", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.ListVhtInstances(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService StartVhtRunJob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.StartVhtRunJob(context.Background(), instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService StopVhtInstance", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.StopVhtInstance(context.Background(), instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VirtualHardwareTargetInstanceApiService UploadVhtInstanceArtefact", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var artefactName string
        var instanceName string

        resp, httpRes, err := apiClient.VirtualHardwareTargetInstanceApi.UploadVhtInstanceArtefact(context.Background(), artefactName, instanceName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
