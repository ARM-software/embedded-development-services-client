/*
Solar API

Testing BuildJobsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_client_BuildJobsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test BuildJobsApiService CancelBuildJob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var jobName string

        resp, httpRes, err := apiClient.BuildJobsApi.CancelBuildJob(context.Background(), jobName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BuildJobsApiService DeleteBuildJob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var jobName string

        resp, httpRes, err := apiClient.BuildJobsApi.DeleteBuildJob(context.Background(), jobName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BuildJobsApiService GetBuildArtefact", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var jobName string
        var artefactName string

        resp, httpRes, err := apiClient.BuildJobsApi.GetBuildArtefact(context.Background(), jobName, artefactName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BuildJobsApiService GetBuildJob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var jobName string

        resp, httpRes, err := apiClient.BuildJobsApi.GetBuildJob(context.Background(), jobName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BuildJobsApiService GetBuildMessages", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var jobName string

        resp, httpRes, err := apiClient.BuildJobsApi.GetBuildMessages(context.Background(), jobName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BuildJobsApiService ListBuildArtefacts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var jobName string

        resp, httpRes, err := apiClient.BuildJobsApi.ListBuildArtefacts(context.Background(), jobName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BuildJobsApiService ListBuildJob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.BuildJobsApi.ListBuildJob(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BuildJobsApiService RetainBuildJob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var jobName string

        resp, httpRes, err := apiClient.BuildJobsApi.RetainBuildJob(context.Background(), jobName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
