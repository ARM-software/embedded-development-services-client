/*
 * Copyright (C) 2020-2023 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
Solar API

This API provides a RESTful interface to all the Solar services e.g. looking for boards, building projects, etc. - This API uses Hypermedia as the Engine of Application State (HATEOAS) to drive the discovery and provide   affordances. - Discovery is possible by following links from the well known root resource. While this specification lists   all supported endpoints, it is only recommended that these are hard coded into a client if code generation is   being used. Otherwise, it is recommended that the discovery mechanisms present in the resources (affordances)   are used exclusively. - Affordances are links which indicate whether an action is currently possible, this is significantly different from   whether the service supports an action in general. This specification defines what actions could be possible,   but only by checking the affordances returned by the API in the returned resources, can a client determine whether   this action is currently possible or available for the current user. For example:   - An operation to modify a resource could be defined in this specification, but the user may lack the appropriate     privileges. In that situation, the affordance link would not be present in the resource when read. Therefore,     the client can infer that it is not possible to edit this resource and present appropriate information to the     user.   - An operation to delete a resource could be defined and be possible in some circumstances. The specification     describes that the delete is supported and how to use it, but the affordance describes whether it is currently     possible. The logic in the API may dictate that if the resource was in use (perhaps it is a running job or used     by another resource), then it will not be possible to delete that resource as it would result in a conflicted     state. - It is strongly encouraged that affordances are used by all clients, even those using code generation. This has the   ability to both improve robustness and the user experience by decoupling the client and server. For example, if for   some reason the criteria for deleting a resource changes, the logic is only implemented in the server and there is   no need to update the logic in the client as it is driven by the affordances. - The format used for the resources is the Hypertext Application Language (HAL), which includes the definition   of links and embedded resources. 

API version: 1.1.1
Contact: support@arm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ArtefactManagerItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtefactManagerItem{}

// ArtefactManagerItem artefact controller resource
type ArtefactManagerItem struct {
	Links NullableArtefactManagerLinks `json:"_links"`
	Metadata NullableCommonMetadata `json:"_metadata"`
	// Category the artefact belongs to.
	Category NullableString `json:"category"`
	// Media type of the artefact according to https://www.iana.org/assignments/media-types/media-types.xhtml
	ContentMediaType string `json:"contentMediaType"`
	// Description of what the artefact is.
	Description string `json:"description"`
	// Extra metadata to include for artefacts.
	ExtraMetadata *map[string]string `json:"extraMetadata,omitempty"`
	// Hash of the artefact (sha256)
	Hash NullableString `json:"hash"`
	// Whether the artefact is required or not for a workflow.
	Mandatory NullableBool `json:"mandatory,omitempty"`
	// Maximum size in bytes accepted for this artefact.
	MaxSize int64 `json:"maxSize"`
	// ID of the artefact as set by the system.
	Name string `json:"name"`
	// Size in bytes of this artefact.
	Size *int64 `json:"size,omitempty"`
	// Optional human readable name of the artefact.
	Title NullableString `json:"title,omitempty"`
}

type _ArtefactManagerItem ArtefactManagerItem

// NewArtefactManagerItem instantiates a new ArtefactManagerItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtefactManagerItem(links NullableArtefactManagerLinks, metadata NullableCommonMetadata, category NullableString, contentMediaType string, description string, hash NullableString, maxSize int64, name string) *ArtefactManagerItem {
	this := ArtefactManagerItem{}
	this.Links = links
	this.Metadata = metadata
	this.Category = category
	this.ContentMediaType = contentMediaType
	this.Description = description
	this.Hash = hash
	this.MaxSize = maxSize
	this.Name = name
	return &this
}

// NewArtefactManagerItemWithDefaults instantiates a new ArtefactManagerItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtefactManagerItemWithDefaults() *ArtefactManagerItem {
	this := ArtefactManagerItem{}
	return &this
}

// GetLinks returns the Links field value
// If the value is explicit nil, the zero value for ArtefactManagerLinks will be returned
func (o *ArtefactManagerItem) GetLinks() ArtefactManagerLinks {
	if o == nil || o.Links.Get() == nil {
		var ret ArtefactManagerLinks
		return ret
	}

	return *o.Links.Get()
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtefactManagerItem) GetLinksOk() (*ArtefactManagerLinks, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links.Get(), o.Links.IsSet()
}

// SetLinks sets field value
func (o *ArtefactManagerItem) SetLinks(v ArtefactManagerLinks) {
	o.Links.Set(&v)
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for CommonMetadata will be returned
func (o *ArtefactManagerItem) GetMetadata() CommonMetadata {
	if o == nil || o.Metadata.Get() == nil {
		var ret CommonMetadata
		return ret
	}

	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtefactManagerItem) GetMetadataOk() (*CommonMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// SetMetadata sets field value
func (o *ArtefactManagerItem) SetMetadata(v CommonMetadata) {
	o.Metadata.Set(&v)
}

// GetCategory returns the Category field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArtefactManagerItem) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}

	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtefactManagerItem) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// SetCategory sets field value
func (o *ArtefactManagerItem) SetCategory(v string) {
	o.Category.Set(&v)
}

// GetContentMediaType returns the ContentMediaType field value
func (o *ArtefactManagerItem) GetContentMediaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentMediaType
}

// GetContentMediaTypeOk returns a tuple with the ContentMediaType field value
// and a boolean to check if the value has been set.
func (o *ArtefactManagerItem) GetContentMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentMediaType, true
}

// SetContentMediaType sets field value
func (o *ArtefactManagerItem) SetContentMediaType(v string) {
	o.ContentMediaType = v
}

// GetDescription returns the Description field value
func (o *ArtefactManagerItem) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ArtefactManagerItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ArtefactManagerItem) SetDescription(v string) {
	o.Description = v
}

// GetExtraMetadata returns the ExtraMetadata field value if set, zero value otherwise.
func (o *ArtefactManagerItem) GetExtraMetadata() map[string]string {
	if o == nil || IsNil(o.ExtraMetadata) {
		var ret map[string]string
		return ret
	}
	return *o.ExtraMetadata
}

// GetExtraMetadataOk returns a tuple with the ExtraMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtefactManagerItem) GetExtraMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExtraMetadata) {
		return nil, false
	}
	return o.ExtraMetadata, true
}

// HasExtraMetadata returns a boolean if a field has been set.
func (o *ArtefactManagerItem) HasExtraMetadata() bool {
	if o != nil && !IsNil(o.ExtraMetadata) {
		return true
	}

	return false
}

// SetExtraMetadata gets a reference to the given map[string]string and assigns it to the ExtraMetadata field.
func (o *ArtefactManagerItem) SetExtraMetadata(v map[string]string) {
	o.ExtraMetadata = &v
}

// GetHash returns the Hash field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArtefactManagerItem) GetHash() string {
	if o == nil || o.Hash.Get() == nil {
		var ret string
		return ret
	}

	return *o.Hash.Get()
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtefactManagerItem) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hash.Get(), o.Hash.IsSet()
}

// SetHash sets field value
func (o *ArtefactManagerItem) SetHash(v string) {
	o.Hash.Set(&v)
}

// GetMandatory returns the Mandatory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArtefactManagerItem) GetMandatory() bool {
	if o == nil || IsNil(o.Mandatory.Get()) {
		var ret bool
		return ret
	}
	return *o.Mandatory.Get()
}

// GetMandatoryOk returns a tuple with the Mandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtefactManagerItem) GetMandatoryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mandatory.Get(), o.Mandatory.IsSet()
}

// HasMandatory returns a boolean if a field has been set.
func (o *ArtefactManagerItem) HasMandatory() bool {
	if o != nil && o.Mandatory.IsSet() {
		return true
	}

	return false
}

// SetMandatory gets a reference to the given NullableBool and assigns it to the Mandatory field.
func (o *ArtefactManagerItem) SetMandatory(v bool) {
	o.Mandatory.Set(&v)
}
// SetMandatoryNil sets the value for Mandatory to be an explicit nil
func (o *ArtefactManagerItem) SetMandatoryNil() {
	o.Mandatory.Set(nil)
}

// UnsetMandatory ensures that no value is present for Mandatory, not even an explicit nil
func (o *ArtefactManagerItem) UnsetMandatory() {
	o.Mandatory.Unset()
}

// GetMaxSize returns the MaxSize field value
func (o *ArtefactManagerItem) GetMaxSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value
// and a boolean to check if the value has been set.
func (o *ArtefactManagerItem) GetMaxSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSize, true
}

// SetMaxSize sets field value
func (o *ArtefactManagerItem) SetMaxSize(v int64) {
	o.MaxSize = v
}

// GetName returns the Name field value
func (o *ArtefactManagerItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ArtefactManagerItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ArtefactManagerItem) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ArtefactManagerItem) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtefactManagerItem) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ArtefactManagerItem) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ArtefactManagerItem) SetSize(v int64) {
	o.Size = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArtefactManagerItem) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtefactManagerItem) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ArtefactManagerItem) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ArtefactManagerItem) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ArtefactManagerItem) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ArtefactManagerItem) UnsetTitle() {
	o.Title.Unset()
}

func (o ArtefactManagerItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtefactManagerItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links.Get()
	toSerialize["_metadata"] = o.Metadata.Get()
	toSerialize["category"] = o.Category.Get()
	toSerialize["contentMediaType"] = o.ContentMediaType
	toSerialize["description"] = o.Description
	if !IsNil(o.ExtraMetadata) {
		toSerialize["extraMetadata"] = o.ExtraMetadata
	}
	toSerialize["hash"] = o.Hash.Get()
	if o.Mandatory.IsSet() {
		toSerialize["mandatory"] = o.Mandatory.Get()
	}
	toSerialize["maxSize"] = o.MaxSize
	toSerialize["name"] = o.Name
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	return toSerialize, nil
}

func (o *ArtefactManagerItem) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"_metadata",
		"category",
		"contentMediaType",
		"description",
		"hash",
		"maxSize",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtefactManagerItem := _ArtefactManagerItem{}

	err = json.Unmarshal(bytes, &varArtefactManagerItem)

	if err != nil {
		return err
	}

	*o = ArtefactManagerItem(varArtefactManagerItem)

	return err
}

type NullableArtefactManagerItem struct {
	value *ArtefactManagerItem
	isSet bool
}

func (v NullableArtefactManagerItem) Get() *ArtefactManagerItem {
	return v.value
}

func (v *NullableArtefactManagerItem) Set(val *ArtefactManagerItem) {
	v.value = val
	v.isSet = true
}

func (v NullableArtefactManagerItem) IsSet() bool {
	return v.isSet
}

func (v *NullableArtefactManagerItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtefactManagerItem(val *ArtefactManagerItem) *NullableArtefactManagerItem {
	return &NullableArtefactManagerItem{value: val, isSet: true}
}

func (v NullableArtefactManagerItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtefactManagerItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


