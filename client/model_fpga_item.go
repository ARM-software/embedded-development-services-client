/*
 * Copyright (C) 2020-2025 Arm Limited or its affiliates and Contributors. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

/*
Solar API

This API provides a RESTful interface to all the Solar services e.g. looking for boards, building projects, etc. - This API uses Hypermedia as the Engine of Application State (HATEOAS) to drive the discovery and provide   affordances. - Discovery is possible by following links from the well known root resource. While this specification lists   all supported endpoints, it is only recommended that these are hard coded into a client if code generation is   being used. Otherwise, it is recommended that the discovery mechanisms present in the resources (affordances)   are used exclusively. - Affordances are links which indicate whether an action is currently possible, this is significantly different from   whether the service supports an action in general. This specification defines what actions could be possible,   but only by checking the affordances returned by the API in the returned resources, can a client determine whether   this action is currently possible or available for the current user. For example:   - An operation to modify a resource could be defined in this specification, but the user may lack the appropriate     privileges. In that situation, the affordance link would not be present in the resource when read. Therefore,     the client can infer that it is not possible to edit this resource and present appropriate information to the     user.   - An operation to delete a resource could be defined and be possible in some circumstances. The specification     describes that the delete is supported and how to use it, but the affordance describes whether it is currently     possible. The logic in the API may dictate that if the resource was in use (perhaps it is a running job or used     by another resource), then it will not be possible to delete that resource as it would result in a conflicted     state. - It is strongly encouraged that affordances are used by all clients, even those using code generation. This has the   ability to both improve robustness and the user experience by decoupling the client and server. For example, if for   some reason the criteria for deleting a resource changes, the logic is only implemented in the server and there is   no need to update the logic in the client as it is driven by the affordances. - The format used for the resources is the Hypertext Application Language (HAL), which includes the definition   of links and embedded resources. 

API version: 1.1.1
Contact: support@arm.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FPGAItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FPGAItem{}

// FPGAItem struct for FPGAItem
type FPGAItem struct {
	Links NullableFPGAItemLinks `json:"_links"`
	Metadata NullableCommonMetadata `json:"_metadata"`
	// A list of repositories accessible from the FPGA host
	AccessibleRepositories []string `json:"accessibleRepositories,omitempty"`
	// Hybrid RSA AES encoded token for the agent managing this specific FPGA host
	AgentAuthToken *string `json:"agentAuthToken,omitempty"`
	// The name of the host machine where the agent controlling this FPGA is running
	AgentHost *string `json:"agentHost,omitempty"`
	// True if this FPGA is currently busy running a job. If this case, the `current` link should be accessible to give more details about the on-going job.
	Busy bool `json:"busy"`
	// True if this FPGA is scheduled to be removed from the service.
	Deprecated bool `json:"deprecated"`
	DeprecationInfo *DeprecationInfo `json:"deprecationInfo,omitempty"`
	// Description of the FPGA configuration
	Description string `json:"description"`
	// Extra metadata to include for FPGAs.
	ExtraMetadata *map[string]string `json:"extraMetadata,omitempty"`
	// Unique ID of this FPGA
	Name string `json:"name"`
	// True if this FPGA is ready to accept jobs to run.
	Ready bool `json:"ready"`
	Repositories *FPGAPayloadRepositories `json:"repositories,omitempty"`
	// Human readable name of the FPGA.
	Title string `json:"title"`
	// Hybrid RSA AES encoded worker authorisation token to use for authorising with the boundary controller
	WorkerAuthToken *string `json:"workerAuthToken,omitempty"`
}

type _FPGAItem FPGAItem

// NewFPGAItem instantiates a new FPGAItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFPGAItem(links NullableFPGAItemLinks, metadata NullableCommonMetadata, busy bool, deprecated bool, description string, name string, ready bool, title string) *FPGAItem {
	this := FPGAItem{}
	this.Links = links
	this.Metadata = metadata
	this.Busy = busy
	this.Deprecated = deprecated
	this.Description = description
	this.Name = name
	this.Ready = ready
	this.Title = title
	return &this
}

// NewFPGAItemWithDefaults instantiates a new FPGAItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFPGAItemWithDefaults() *FPGAItem {
	this := FPGAItem{}
	return &this
}

// GetLinks returns the Links field value
// If the value is explicit nil, the zero value for FPGAItemLinks will be returned
func (o *FPGAItem) GetLinks() FPGAItemLinks {
	if o == nil || o.Links.Get() == nil {
		var ret FPGAItemLinks
		return ret
	}

	return *o.Links.Get()
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPGAItem) GetLinksOk() (*FPGAItemLinks, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links.Get(), o.Links.IsSet()
}

// SetLinks sets field value
func (o *FPGAItem) SetLinks(v FPGAItemLinks) {
	o.Links.Set(&v)
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for CommonMetadata will be returned
func (o *FPGAItem) GetMetadata() CommonMetadata {
	if o == nil || o.Metadata.Get() == nil {
		var ret CommonMetadata
		return ret
	}

	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPGAItem) GetMetadataOk() (*CommonMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// SetMetadata sets field value
func (o *FPGAItem) SetMetadata(v CommonMetadata) {
	o.Metadata.Set(&v)
}

// GetAccessibleRepositories returns the AccessibleRepositories field value if set, zero value otherwise.
func (o *FPGAItem) GetAccessibleRepositories() []string {
	if o == nil || IsNil(o.AccessibleRepositories) {
		var ret []string
		return ret
	}
	return o.AccessibleRepositories
}

// GetAccessibleRepositoriesOk returns a tuple with the AccessibleRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetAccessibleRepositoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessibleRepositories) {
		return nil, false
	}
	return o.AccessibleRepositories, true
}

// HasAccessibleRepositories returns a boolean if a field has been set.
func (o *FPGAItem) HasAccessibleRepositories() bool {
	if o != nil && !IsNil(o.AccessibleRepositories) {
		return true
	}

	return false
}

// SetAccessibleRepositories gets a reference to the given []string and assigns it to the AccessibleRepositories field.
func (o *FPGAItem) SetAccessibleRepositories(v []string) {
	o.AccessibleRepositories = v
}

// GetAgentAuthToken returns the AgentAuthToken field value if set, zero value otherwise.
func (o *FPGAItem) GetAgentAuthToken() string {
	if o == nil || IsNil(o.AgentAuthToken) {
		var ret string
		return ret
	}
	return *o.AgentAuthToken
}

// GetAgentAuthTokenOk returns a tuple with the AgentAuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetAgentAuthTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AgentAuthToken) {
		return nil, false
	}
	return o.AgentAuthToken, true
}

// HasAgentAuthToken returns a boolean if a field has been set.
func (o *FPGAItem) HasAgentAuthToken() bool {
	if o != nil && !IsNil(o.AgentAuthToken) {
		return true
	}

	return false
}

// SetAgentAuthToken gets a reference to the given string and assigns it to the AgentAuthToken field.
func (o *FPGAItem) SetAgentAuthToken(v string) {
	o.AgentAuthToken = &v
}

// GetAgentHost returns the AgentHost field value if set, zero value otherwise.
func (o *FPGAItem) GetAgentHost() string {
	if o == nil || IsNil(o.AgentHost) {
		var ret string
		return ret
	}
	return *o.AgentHost
}

// GetAgentHostOk returns a tuple with the AgentHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetAgentHostOk() (*string, bool) {
	if o == nil || IsNil(o.AgentHost) {
		return nil, false
	}
	return o.AgentHost, true
}

// HasAgentHost returns a boolean if a field has been set.
func (o *FPGAItem) HasAgentHost() bool {
	if o != nil && !IsNil(o.AgentHost) {
		return true
	}

	return false
}

// SetAgentHost gets a reference to the given string and assigns it to the AgentHost field.
func (o *FPGAItem) SetAgentHost(v string) {
	o.AgentHost = &v
}

// GetBusy returns the Busy field value
func (o *FPGAItem) GetBusy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Busy
}

// GetBusyOk returns a tuple with the Busy field value
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetBusyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Busy, true
}

// SetBusy sets field value
func (o *FPGAItem) SetBusy(v bool) {
	o.Busy = v
}

// GetDeprecated returns the Deprecated field value
func (o *FPGAItem) GetDeprecated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetDeprecatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deprecated, true
}

// SetDeprecated sets field value
func (o *FPGAItem) SetDeprecated(v bool) {
	o.Deprecated = v
}

// GetDeprecationInfo returns the DeprecationInfo field value if set, zero value otherwise.
func (o *FPGAItem) GetDeprecationInfo() DeprecationInfo {
	if o == nil || IsNil(o.DeprecationInfo) {
		var ret DeprecationInfo
		return ret
	}
	return *o.DeprecationInfo
}

// GetDeprecationInfoOk returns a tuple with the DeprecationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetDeprecationInfoOk() (*DeprecationInfo, bool) {
	if o == nil || IsNil(o.DeprecationInfo) {
		return nil, false
	}
	return o.DeprecationInfo, true
}

// HasDeprecationInfo returns a boolean if a field has been set.
func (o *FPGAItem) HasDeprecationInfo() bool {
	if o != nil && !IsNil(o.DeprecationInfo) {
		return true
	}

	return false
}

// SetDeprecationInfo gets a reference to the given DeprecationInfo and assigns it to the DeprecationInfo field.
func (o *FPGAItem) SetDeprecationInfo(v DeprecationInfo) {
	o.DeprecationInfo = &v
}

// GetDescription returns the Description field value
func (o *FPGAItem) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FPGAItem) SetDescription(v string) {
	o.Description = v
}

// GetExtraMetadata returns the ExtraMetadata field value if set, zero value otherwise.
func (o *FPGAItem) GetExtraMetadata() map[string]string {
	if o == nil || IsNil(o.ExtraMetadata) {
		var ret map[string]string
		return ret
	}
	return *o.ExtraMetadata
}

// GetExtraMetadataOk returns a tuple with the ExtraMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetExtraMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExtraMetadata) {
		return nil, false
	}
	return o.ExtraMetadata, true
}

// HasExtraMetadata returns a boolean if a field has been set.
func (o *FPGAItem) HasExtraMetadata() bool {
	if o != nil && !IsNil(o.ExtraMetadata) {
		return true
	}

	return false
}

// SetExtraMetadata gets a reference to the given map[string]string and assigns it to the ExtraMetadata field.
func (o *FPGAItem) SetExtraMetadata(v map[string]string) {
	o.ExtraMetadata = &v
}

// GetName returns the Name field value
func (o *FPGAItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FPGAItem) SetName(v string) {
	o.Name = v
}

// GetReady returns the Ready field value
func (o *FPGAItem) GetReady() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ready
}

// GetReadyOk returns a tuple with the Ready field value
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetReadyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ready, true
}

// SetReady sets field value
func (o *FPGAItem) SetReady(v bool) {
	o.Ready = v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *FPGAItem) GetRepositories() FPGAPayloadRepositories {
	if o == nil || IsNil(o.Repositories) {
		var ret FPGAPayloadRepositories
		return ret
	}
	return *o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetRepositoriesOk() (*FPGAPayloadRepositories, bool) {
	if o == nil || IsNil(o.Repositories) {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *FPGAItem) HasRepositories() bool {
	if o != nil && !IsNil(o.Repositories) {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given FPGAPayloadRepositories and assigns it to the Repositories field.
func (o *FPGAItem) SetRepositories(v FPGAPayloadRepositories) {
	o.Repositories = &v
}

// GetTitle returns the Title field value
func (o *FPGAItem) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *FPGAItem) SetTitle(v string) {
	o.Title = v
}

// GetWorkerAuthToken returns the WorkerAuthToken field value if set, zero value otherwise.
func (o *FPGAItem) GetWorkerAuthToken() string {
	if o == nil || IsNil(o.WorkerAuthToken) {
		var ret string
		return ret
	}
	return *o.WorkerAuthToken
}

// GetWorkerAuthTokenOk returns a tuple with the WorkerAuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FPGAItem) GetWorkerAuthTokenOk() (*string, bool) {
	if o == nil || IsNil(o.WorkerAuthToken) {
		return nil, false
	}
	return o.WorkerAuthToken, true
}

// HasWorkerAuthToken returns a boolean if a field has been set.
func (o *FPGAItem) HasWorkerAuthToken() bool {
	if o != nil && !IsNil(o.WorkerAuthToken) {
		return true
	}

	return false
}

// SetWorkerAuthToken gets a reference to the given string and assigns it to the WorkerAuthToken field.
func (o *FPGAItem) SetWorkerAuthToken(v string) {
	o.WorkerAuthToken = &v
}

func (o FPGAItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FPGAItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["_links"] = o.Links.Get()
	toSerialize["_metadata"] = o.Metadata.Get()
	if !IsNil(o.AccessibleRepositories) {
		toSerialize["accessibleRepositories"] = o.AccessibleRepositories
	}
	if !IsNil(o.AgentAuthToken) {
		toSerialize["agentAuthToken"] = o.AgentAuthToken
	}
	if !IsNil(o.AgentHost) {
		toSerialize["agentHost"] = o.AgentHost
	}
	toSerialize["busy"] = o.Busy
	toSerialize["deprecated"] = o.Deprecated
	if !IsNil(o.DeprecationInfo) {
		toSerialize["deprecationInfo"] = o.DeprecationInfo
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.ExtraMetadata) {
		toSerialize["extraMetadata"] = o.ExtraMetadata
	}
	toSerialize["name"] = o.Name
	toSerialize["ready"] = o.Ready
	if !IsNil(o.Repositories) {
		toSerialize["repositories"] = o.Repositories
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.WorkerAuthToken) {
		toSerialize["workerAuthToken"] = o.WorkerAuthToken
	}
	return toSerialize, nil
}

func (o *FPGAItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"_links",
		"_metadata",
		"busy",
		"deprecated",
		"description",
		"name",
		"ready",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFPGAItem := _FPGAItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFPGAItem)

	if err != nil {
		return err
	}

	*o = FPGAItem(varFPGAItem)

	return err
}

type NullableFPGAItem struct {
	value *FPGAItem
	isSet bool
}

func (v NullableFPGAItem) Get() *FPGAItem {
	return v.value
}

func (v *NullableFPGAItem) Set(val *FPGAItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFPGAItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFPGAItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPGAItem(val *FPGAItem) *NullableFPGAItem {
	return &NullableFPGAItem{value: val, isSet: true}
}

func (v NullableFPGAItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPGAItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


